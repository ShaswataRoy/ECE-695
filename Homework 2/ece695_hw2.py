# -*- coding: utf-8 -*-
"""ECE695 Hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wjXSFQPSgTN9VbH1MLDMjA4Kzky0kQNz
"""

from PIL import Image
import PIL
import torch
import matplotlib.pyplot as plt
import numpy as np
from typing import List
from torchvision import transforms

#Answer 2
im = Image.open("1.jpg")
plt.imshow(im)

#Answer 3

convert = transforms.Compose([ transforms.Normalize([0.5,0.5,0.5],[0.5,0.5,0.5]) ])



def RGB_hist(rgb_tensor: torch.Tensor)-> List[torch.Tensor]:
  r_tensor = rgb_tensor[0]
  g_tensor = rgb_tensor[1]
  b_tensor = rgb_tensor[2]
  
  hist_r = torch.histc(r_tensor, bins = 10, min = -1.0, max = 1.0)
  hist_g = torch.histc(g_tensor, bins = 10, min = -1.0, max = 1.0)
  hist_b = torch.histc(b_tensor, bins = 10, min = -1.0, max = 1.0)

  hist_r = hist_r.div(hist_r.sum())
  hist_g = hist_g.div(hist_g.sum())
  hist_b = hist_b.div(hist_b.sum())

  return [hist_r,hist_g,hist_b]


x = np.linspace(-1,0.8,10)
plt.figure(figsize=(25,20))

tensor_imgs = []
histTensor = []
for i in range(1,3):
  im = Image.open(str(i)+".jpg")
  tensor_im = transforms.ToTensor()(im)
  tensor_im = convert(tensor_im)
  tensor_imgs.append(tensor_im)
  
  [hist_r,hist_g,hist_b] = RGB_hist(tensor_im)
  histTensor.append([hist_r,hist_g,hist_b])
  
  plt.subplot(4,4,4*i+1)
  plt.imshow(im)

  plt.subplot(4,4,4*i+2)
  plt.bar(x,hist_r,width=0.2,align='edge',color='r',alpha=0.3)

  plt.subplot(4,4,4*i+3)

  plt.bar(x,hist_g,width=0.2,align='edge',color='g',alpha=0.3)

  plt.subplot(4,4,4*i+4)

  plt.bar(x,hist_b,width=0.2,align='edge',color='b',alpha=0.3)

#Answer 4
from scipy.stats import wasserstein_distance

for ch in range(3):
  dist = wasserstein_distance( torch.squeeze( histTensor[0][ch] ).cpu().numpy(),torch.squeeze( histTensor[1][ch] ).cpu().numpy() )
  print("\n Wasserstein distance for channel: ", dist)

#Answer 5
import torchvision.transforms.functional as TF

plt.figure(figsize=(8,6))

affine_transformer = TF.affine(tensor_imgs[1],angle=-25,translate=(-50.,200.),scale=1.,shear=0.,fill=0)
cropped = TF.crop(tensor_imgs[0],800,500,2000,3000)
affine_transformer = TF.crop(affine_transformer,800,500,2000,3000)
for i in range(-40,0,5):
  affine_transformer = TF.affine(tensor_imgs[1],angle=i,translate=(-50.,200.),scale=1.,shear=0.,fill=0)
  cropped = TF.crop(tensor_imgs[0],800,500,2000,3000)
  affine_transformer = TF.crop(affine_transformer,800,500,2000,3000)
  histTensor[0] = RGB_hist(cropped)

  histTensor[1] = RGB_hist(affine_transformer)

  dist = 0

  for ch in range(3):
    dist = dist+wasserstein_distance( torch.squeeze( histTensor[0][ch] ).cpu().numpy(),torch.squeeze( histTensor[1][ch] ).cpu().numpy() )
  print("\n Angle ", i," Total Wasserstein distance ",dist)

affine_transformer = TF.affine(tensor_imgs[1],angle=-25,translate=(-50.,200.),scale=1.,shear=0.,fill=0)
cropped = TF.crop(tensor_imgs[0],800,500,2000,3000)
affine_transformer = TF.crop(affine_transformer,800,500,2000,3000)
plt.imshow(cropped[0],alpha=0.5,cmap='gray')
plt.imshow(affine_transformer[0],alpha=0.3,cmap='gray')

#Answer 6
for x in range(-50,200,50):
  affine_transformer = TF.affine(tensor_imgs[1],angle=-25,translate=(-50.,200.),scale=1.,shear=0.,fill=0)
  perspective_transformer = TF.perspective(affine_transformer,startpoints=[[500,500],[500,2500],[2500,2500],[2500,500]],endpoints=[[500,500+x],[500,2500-x],[2500,2500-x],[2500,500+x]],fill=1)
  perspective_transformer= TF.crop(perspective_transformer,800,500,2000,3000)

  cropped = TF.crop(tensor_imgs[0],800,500,2000,3000)
  #plt.imshow(cropped[0],alpha=0.5,cmap='gray')
  #plt.imshow(perspective_transformer[0],alpha=0.3,cmap='gray')

  histTensor[0] = RGB_hist(cropped)

  histTensor[1] = RGB_hist(perspective_transformer)

  dist = 0

  for ch in range(3):
    dist = dist+wasserstein_distance( torch.squeeze( histTensor[0][ch] ).cpu().numpy(),torch.squeeze( histTensor[1][ch] ).cpu().numpy() )
  print("\n Perpective Change", x," Total Wasserstein distance ",dist)

x=50
affine_transformer = TF.affine(tensor_imgs[1],angle=-25,translate=(-50.,200.),scale=1.,shear=0.,fill=0)
perspective_transformer = TF.perspective(affine_transformer,startpoints=[[500,500],[500,2500],[2500,2500],[2500,500]],endpoints=[[500,500+x],[500,2500-x],[2500,2500-x],[2500,500+x]],fill=1)
perspective_transformer= TF.crop(perspective_transformer,800,500,2000,3000)

cropped = TF.crop(tensor_imgs[0],800,500,2000,3000)
plt.imshow(cropped[0],alpha=0.5,cmap='gray')
plt.imshow(perspective_transformer[0],alpha=0.3,cmap='gray')